;;; src/mref.lisp

(in-package #:gauss)

(declaim (inline mindex))
(defun mindex (matrix row col)
  (+ (* (mrf matrix) row)
     (* (mcf matrix) col)))

(template:define-templated-function mref (type) (matrix row col)
  `(policy-cond:with-expectations (> speed safety)
       ((type unsigned-byte row)
        (type unsigned-byte col)
        (assertion (eql (mtype matrix) ',type))
        (assertion (< row (mrows matrix)))
        (assertion (< col (mcols matrix))))
     (the ,type (aref (mvals matrix) (mindex matrix row col)))))

(template:define-templated-function set-mref (type) (val matrix row col)
  `(policy-cond:with-expectations (> speed safety)
       ((type unsigned-byte row)
        (type unsigned-byte col)
        (type ,type val)
        (assertion (eql (array-element-type (mvals matrix)) ',type))
        (assertion (< row (mrows matrix)))
        (assertion (< col (mcols matrix))))
     (setf (aref (mvals matrix) (mindex matrix row col)) val)))

(template:define-templated-function vref (type) (vector row)
  `(policy-cond:with-expectations (> speed safety)
       ((type unsigned-byte row)
        (assertion (eql (mtype vector) ',type))
        (assertion (< row (mrows vector)))
        (assertion (= 1 (mcols vector))))
     (the ,type (aref (mvals vector) row))))

(template:define-templated-function set-vref (type) (val vector row)
  `(policy-cond:with-expectations (> speed safety)
       ((type unsigned-byte row)
        (type ,type val)
        (assertion (eql (mtype vector) ',type))
        (assertion (< row (mrows vector)))
        (assertion (= 1 (mcols vector))))
     (setf (aref (mvals vector) row) val)))

(template:define-templated-function vtref (type) (vector col)
  `(policy-cond:with-expectations (> speed safety)
       ((type unsigned-byte col)
        (assertion (eql (mtype vector) ',type))
        (assertion (< col (mcols vector)))
        (assertion (= 1 (mrows vector))))
     (the ,type (aref (mvals vector) col))))

(defmethod print-object ((m matrix) stream)
  (if *print-readably*
      (call-next-method)
      (print-unreadable-object (m stream :type t)
        (loop :for row :below (mrows m)
           :do (fresh-line stream)
           :do (loop :with mtype := (mtype m)
                  :for col :below (mcols m)
                  :do (format stream "  ~A" (mref (list mtype) m row col)))))))
